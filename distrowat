#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
# shellcheck source=/dev/null
# shellcheck disable=2009

version=0.9.0

OUTPUT_FORMAT="color"

set_colors() {
    if [[ "$OUTPUT_FORMAT" == "color" ]] && [[ -t 1 ]]; then
        RED=$'\033[0;31m'
        GREEN=$'\033[0;32m'
        YELLOW=$'\033[0;33m'
        BLUE=$'\033[0;34m'
        PURPLE=$'\033[0;35m'
        CYAN=$'\033[0;36m'
        BOLD=$'\033[1m'
        RESET=$'\033[0m'
    else
        RED=''
        GREEN=''
        YELLOW=''
        BLUE=''
        PURPLE=''
        CYAN=''
        BOLD=''
        RESET=''
    fi
}

set_colors

show_help() {
    printf "%b" "${BOLD}distro${RESET} - Display distribution information\n"
    printf "\n"
    printf "%b" "${BOLD}USAGE:${RESET}\n"
    printf "%b" "  distro [OPTIONS] {name|version|id|pretty|codename|all}\n"
    printf "\n"
    printf "%b" "${BOLD}OPTIONS:${RESET}\n"
    printf "%b" "  -p, --plain    Plain text output (no colors, simple format)\n"
    printf "%b" "  -c, --color    Colored output (default)\n"
    printf "%b" "  -j, --json     JSON formatted output\n"
    printf "%b" "  -h, --help     Show this help message\n"
    printf "%b" "  -v, --version  Show version information\n"
    printf "\n"
    printf "%b" "${BOLD}COMMANDS:${RESET}\n"
    printf "%b" "  ${CYAN}name${RESET}      Distribution name\n"
    printf "%b" "  ${CYAN}version${RESET}   Distribution version\n"
    printf "%b" "  ${CYAN}id${RESET}        Distribution ID\n"
    printf "%b" "  ${CYAN}pretty${RESET}    Pretty formatted name\n"
    printf "%b" "  ${CYAN}codename${RESET}  Distribution codename\n"
    printf "%b" "  ${CYAN}all${RESET}       Show all information (including release/EOL dates)\n"
    printf "\n"
    printf "%b" "${BOLD}EXAMPLES:${RESET}\n"
    printf "%b" "  distro pretty                # Colored output (default)\n"
    printf "%b" "  distro --plain version       # Plain text output\n"
    printf "%b" "  distro --json all           # JSON output\n"
    printf "%b" "  distro -p name              # Short option for plain\n"
}

get_macos_name() {
    local version="$1"
    local major="${version%%.*}"
    local minor="${version#*.}"
    minor="${minor%%.*}"

    case "$major" in
    15) echo "Sequoia" ;;
    14) echo "Sonoma" ;;
    13) echo "Ventura" ;;
    12) echo "Monterey" ;;
    11) echo "Big Sur" ;;
    10)
        case "$minor" in
        15) echo "Catalina" ;;
        14) echo "Mojave" ;;
        13) echo "High Sierra" ;;
        12) echo "Sierra" ;;
        11) echo "El Capitan" ;;
        10) echo "Yosemite" ;;
        9) echo "Mavericks" ;;
        8) echo "Mountain Lion" ;;
        7) echo "Lion" ;;
        6) echo "Snow Leopard" ;;
        *) echo "OS X" ;;
        esac
        ;;
    *) echo "macOS" ;;
    esac
}

get_release_eol_dates() {
    local distro_id="$1"
    local version="$2"
    local codename="$3"
    local release_date="Unknown"
    local eol_date="Unknown"

    case "$distro_id" in
    ubuntu)
        if [[ -f /usr/share/distro-info/ubuntu.csv ]]; then
            local csv_line
            csv_line=$(grep "^$version," /usr/share/distro-info/ubuntu.csv 2>/dev/null)
            if [[ -z "$csv_line" ]] && [[ -n "$codename" ]] && [[ "$codename" != "N/A" ]]; then
                csv_line=$(grep ",$codename," /usr/share/distro-info/ubuntu.csv 2>/dev/null)
            fi

            if [[ -n "$csv_line" ]]; then
                release_date=$(echo "$csv_line" | awk -F',' '{print $5}')
                eol_date=$(echo "$csv_line" | awk -F',' '{print $6}')

                local eol_server
                eol_server=$(echo "$csv_line" | awk -F',' '{print $7}')
                if [[ -n "$eol_server" ]] && [[ "$eol_server" != "$eol_date" ]]; then
                    eol_date="$eol_server"
                fi
            fi
        fi
        ;;

    arch | archarm | cachyos | manjaro | endeavouros | garuda)
        release_date="Rolling Release"
        eol_date="N/A"
        ;;

    *)
        release_date="Unknown"
        eol_date="Unknown"
        ;;
    esac

    echo "$release_date|$eol_date"
}

get_all_info() {
    local name version id pretty codename

    if [[ "$OSTYPE" == "darwin"* ]] || [[ "$(uname)" == "Darwin" ]]; then
        name="macOS"
        version=$(sw_vers -productVersion 2>/dev/null || echo "Unknown")
        id="macos"
        local build
        build=$(sw_vers -buildVersion 2>/dev/null || echo "Unknown")
        local version_name
        version_name=$(get_macos_name "$version")
        pretty="macOS ${version_name} ${version} (${build})"
        codename=$(echo "$version_name" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
    else
        if [ -f /etc/os-release ]; then
            name=$(grep "^NAME=" /etc/os-release | cut -d= -f2 | tr -d '"')
            version=$(grep "^VERSION_ID=" /etc/os-release | cut -d= -f2 | tr -d '"')
            id=$(grep "^ID=" /etc/os-release | cut -d= -f2 | tr -d '"')
            pretty=$(grep "^PRETTY_NAME=" /etc/os-release | cut -d= -f2 | tr -d '"')
            codename=$(grep "^VERSION_CODENAME=" /etc/os-release | cut -d= -f2 | tr -d '"')

            # For Arch-based distros, use BUILD_ID if VERSION_ID is not available
            if [[ -z "$version" ]] && [[ "$id" =~ ^(arch|archarm|cachyos|manjaro|endeavouros|garuda)$ ]]; then
                version=$(grep "^BUILD_ID=" /etc/os-release | cut -d= -f2 | tr -d '"')
                # If still empty, use "Rolling"
                [[ -z "$version" ]] && version="Rolling"
            fi
        elif [ -f /etc/redhat-release ]; then
            name=$(awk '{print $1}' /etc/redhat-release)
            version=$(grep -oE '[0-9]+\.?[0-9]*' /etc/redhat-release | head -1)
            id=$(awk '{print tolower($1)}' /etc/redhat-release)
            pretty=$(cat /etc/redhat-release)
            codename=""
        elif [ -f /etc/alpine-release ]; then
            name="Alpine Linux"
            version=$(cat /etc/alpine-release)
            id="alpine"
            pretty="Alpine Linux v$version"
            codename=""
        elif [ -f /etc/debian_version ]; then
            name="Debian"
            version=$(cat /etc/debian_version)
            id="debian"
            pretty="Debian GNU/Linux $(cat /etc/debian_version)"
            codename=$(command -v lsb_release >/dev/null 2>&1 && lsb_release -cs || echo "")
        else
            name="Unknown"
            version="Unknown"
            id="unknown"
            pretty="Unknown Linux Distribution"
            codename=""
        fi
    fi

    [ -z "$codename" ] && codename="N/A"

    local dates_info
    dates_info=$(get_release_eol_dates "$id" "$version" "$codename")
    IFS='|' read -r release_date eol_date <<<"$dates_info"

    echo "$name|$version|$id|$pretty|$codename|$release_date|$eol_date"
}

format_output() {
    local field="$1"
    local value="$2"

    case "$OUTPUT_FORMAT" in
    "json")
        value="${value//\"/\\\"}"
        echo "{\"$field\": \"$value\"}"
        ;;
    "plain")
        echo "$value"
        ;;
    "color")
        case "$field" in
        "name")
            printf "%b\n" "${BOLD}${GREEN}Distribution Name:${RESET} ${CYAN}$value${RESET}"
            ;;
        "version")
            printf "%b\n" "${BOLD}${GREEN}Version:${RESET} ${YELLOW}$value${RESET}"
            ;;
        "id")
            printf "%b\n" "${BOLD}${GREEN}ID:${RESET} ${PURPLE}$value${RESET}"
            ;;
        "pretty")
            printf "%b\n" "${BOLD}${GREEN}Pretty Name:${RESET} ${BLUE}$value${RESET}"
            ;;
        "codename")
            printf "%b\n" "${BOLD}${GREEN}Codename:${RESET} ${RED}$value${RESET}"
            ;;
        *)
            echo "$value"
            ;;
        esac
        ;;
    esac
}

format_all() {
    local info="$1"
    IFS='|' read -r name version id pretty codename release_date eol_date <<<"$info"

    case "$OUTPUT_FORMAT" in
    "json")
        name="${name//\"/\\\"}"
        version="${version//\"/\\\"}"
        id="${id//\"/\\\"}"
        pretty="${pretty//\"/\\\"}"
        codename="${codename//\"/\\\"}"
        release_date="${release_date//\"/\\\"}"
        eol_date="${eol_date//\"/\\\"}"

        cat <<EOF
{
  "name": "$name",
  "version": "$version",
  "id": "$id",
  "pretty": "$pretty",
  "codename": "$codename",
  "release_date": "$release_date",
  "end_of_life": "$eol_date"
}
EOF
        ;;
    "plain")
        echo "Name: $name"
        echo "Version: $version"
        echo "ID: $id"
        echo "Pretty Name: $pretty"
        echo "Codename: $codename"
        echo "Release Date: $release_date"
        echo "End of Life: $eol_date"
        ;;
    "color")
        local max_width=0
        local lines=(
            "Distribution: $name"
            "Version:      $version"
            "ID:           $id"
            "Pretty Name:  $pretty"
            "Codename:     $codename"
            "Release Date: $release_date"
            "End of Life:  $eol_date"
        )

        for line in "${lines[@]}"; do
            local len=${#line}
            if [ "$len" -gt "$max_width" ]; then
                max_width=$len
            fi
        done

        local box_width=$((max_width + 2))

        make_line() {
            local left="$1"
            local middle="$2"
            local right="$3"
            local width="$4"
            printf "%b" "$left"
            for ((i = 0; i < width; i++)); do
                printf "%b" "$middle"
            done
            printf "%b" "$right"
        }

        pad_line() {
            local text="$1"
            local plain_text
            # shellcheck disable=SC2001
            plain_text=$(echo "$text" | sed 's/\x1b\[[0-9;]*m//g')
            local text_len=${#plain_text}
            local pad_len=$((box_width - text_len - 1)) # -1 for the space before text
            printf "%s%*s" "$text" $pad_len ""
        }

        center_text() {
            local text="$1"
            local plain_text
            # shellcheck disable=SC2001
            plain_text=$(echo "$text" | sed 's/\x1b\[[0-9;]*m//g')
            local text_len=${#plain_text}
            local total_pad=$((box_width - text_len))
            local left_pad=$((total_pad / 2))
            local right_pad=$((total_pad - left_pad))
            printf "%*s%s%*s" $left_pad "" "$text" $right_pad ""
        }

        # Draw system information box
        printf "%b%b%b\n" "${BOLD}${BLUE}" "$(make_line '╔' '═' '╗' $box_width)" "${RESET}"
        printf "%b%b%b\n" "${BOLD}${BLUE}║${RESET}" "$(center_text "${BOLD}System Information${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b%b%b\n" "${BOLD}${BLUE}" "$(make_line '╠' '═' '╣' $box_width)" "${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}Distribution:${RESET} ${CYAN}$name${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}Version:${RESET}      ${YELLOW}$version${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}ID:${RESET}           ${PURPLE}$id${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}Pretty Name:${RESET}  ${BLUE}$pretty${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}Codename:${RESET}     ${RED}$codename${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b%b%b\n" "${BOLD}${BLUE}" "$(make_line '╟' '─' '╢' $box_width)" "${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}Release Date:${RESET} ${CYAN}$release_date${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b %b%b\n" "${BOLD}${BLUE}║${RESET}" "$(pad_line "${BOLD}${GREEN}End of Life:${RESET}  ${RED}$eol_date${RESET}")" "${BOLD}${BLUE}║${RESET}"
        printf "%b%b%b\n" "${BOLD}${BLUE}" "$(make_line '╚' '═' '╝' $box_width)" "${RESET}"
        ;;
    esac
}

distro() {
    local info
    info=$(get_all_info)
    IFS='|' read -r name version id pretty codename release_date eol_date <<<"$info"

    case "$1" in
    "name")
        format_output "name" "$name"
        ;;
    "version")
        format_output "version" "$version"
        ;;
    "id")
        format_output "id" "$id"
        ;;
    "pretty")
        format_output "pretty" "$pretty"
        ;;
    "codename")
        format_output "codename" "$codename"
        ;;
    "all")
        format_all "$info"
        ;;
    *)
        printf "%b\n" "${RED}Error: Invalid command '$1'${RESET}" >&2
        echo "Usage: distro [OPTIONS] {name|version|id|pretty|codename|all}" >&2
        return 1
        ;;
    esac
}

COMMAND=""
while [[ $# -gt 0 ]]; do
    case "$1" in
    -p | --plain)
        OUTPUT_FORMAT="plain"
        set_colors
        shift
        ;;
    -c | --color)
        OUTPUT_FORMAT="color"
        set_colors
        shift
        ;;
    -j | --json)
        OUTPUT_FORMAT="json"
        set_colors
        shift
        ;;
    -h | --help)
        show_help
        exit 0
        ;;
    -v | --version)
        echo "distro version $version"
        exit 0
        ;;
    -*)
        printf "%b\n" "${RED}Error: Unknown option '$1'${RESET}" >&2
        echo "Try 'distro --help' for more information." >&2
        exit 1
        ;;
    *)
        COMMAND="$1"
        shift
        ;;
    esac
done

if [[ -z "$COMMAND" ]]; then
    show_help
    exit 0
fi

distro "$COMMAND"
